from src.genome.genome import Genome
from src.mutators.mutator import Mutator


def curry_genome_seeder(mutator, seed_genomes=None):
    """Construct genome generator.

    Args:
      seed_genomes: list of genomes that will be copied and mutated.
      mutator: defined Mutator object that acts on genomes.

    Returns: function
      Generator function that takes a value n and returns n genomes
      generated by sampling the seed_genome list, copying and mutating

    Raises:
      ValueError: mutator param must be of type Mutator
    """
    if not seed_genomes:
        seed_genomes = [Genome.default()]

    if not issubclass(type(mutator), Mutator):
        raise ValueError('Mutator param must be of type Mutator')

    def genome_seeder(n):
        count = 0
        while count < n:
            for seed_genome in seed_genomes:
                genome = Genome.copy(seed_genome)
                mutator(genome)
                yield genome
                count += 1
    return genome_seeder
